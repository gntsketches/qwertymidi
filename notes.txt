
TODO

- fix everything with the synthesizers
- bpm apparently *does* affect quantization... #85 was recorded at 120 vs #84 at 60
- double check that quantization selections actually do that
- get qwerty to light up
- grey download box when there's no download
- bpm selector disables qwerty notes on focus



structure:
    - maybe pressQwerty logic should be a container for Qwerty?
    - where to put download logic?
        - maybe in a container for Download button?


how much functionality do i want here?
    - switch sounds
    - change note octaves
    - write midi time signatures and bpm
    - disable qwerty sounds in



https://github.com/robtaussig/qwertymidi/commit/f21442578743f3e9878169efc40684160cb80d6d#comments
Robtaussig Questions:
    - choice to accessed windows.tone directly from the useEffect closure
        "window.Tone is mutable" - does reference actually change? Would I get a previous 'version"?
        this is not "querying the DOM" so I don't have to worry about performance
        (Maybe will skip this to try out with a merge conflict later on...?)

    - Yeah! Destructuring "helps you keep track of props that you no longer use in a component as it evolves (depending on your IDE support)"
    - useRef yes!

    - setDown function approach
    - (i think so): "It's possible redux has added a new syntax, or support for one, and you no longer need to do this. But this is what I learned way back, and if you don't dispatch an action, it will never hit your reducer.
    - not destructuring? using the same object?  let keyObject = {...down.find((obj) => obj.key === e.key)}


**********************************************************
cloned robtaussig fork, worked but once while playing got:

TypeError: Cannot read property 'startTime' of undefined
handleKeyUp
C:/Users/Gregory Tippett/Documents/Coding/javascript/qwertymidi/qwertymidi/src/components/PressQwerty.js:39
  36 | const handleKeyUp = e => {
  37 | 	if (NOTE_KEYS_ALL.includes(e.key)) {  // && down etc...?
  38 | 		let keyObject = down.find((obj) => obj.key === e.key)
> 39 | 		let noteObject = { note: KEYS_TO_PITCH[e.key], startTime: keyObject.startTime }
     | ^  40 | 		noteObject.endTime = window.Tone.Transport.getSecondsAtTime()
  41 | 		setDown(prev => prev.filter(obj => obj.key !== e.key))
  42 | 		setDownKeys(prev => prev.filter(key => key !== e.key))